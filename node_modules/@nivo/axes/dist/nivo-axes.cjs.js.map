{"version":3,"file":"nivo-axes.cjs.js","sources":["../src/compute.ts","../src/components/AxisTick.tsx","../src/components/Axis.tsx","../src/props.ts","../src/components/Axes.tsx","../src/components/GridLine.tsx","../src/components/GridLines.tsx","../src/components/Grid.tsx","../src/canvas.ts"],"sourcesContent":["import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-expect-error no types\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    truncateTickAt,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    truncateTickAt?: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const truncateTick = (value: string) => {\n        const valueLength = String(value).length\n\n        if (truncateTickAt && truncateTickAt > 0 && valueLength > truncateTickAt) {\n            return `${String(value).slice(0, truncateTickAt).concat('...')}`\n        }\n        return `${value}`\n    }\n\n    const ticks = values.map((value: Value) => {\n        const processedValue =\n            typeof value === 'string' ? (truncateTick(value) as unknown as Value) : value\n        return {\n            key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n            value: processedValue,\n            ...translate(value),\n            ...line,\n            ...text,\n        }\n    })\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { Text } from '@nivo/text'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    theme,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.line} />\n            <Text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.text}\n            >\n                {`${value}`}\n            </Text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMotionConfig } from '@nivo/core'\nimport { useTheme, useExtendedAxisTheme } from '@nivo/theming'\nimport { Text } from '@nivo/text'\nimport { AnyScale, ScaleValue } from '@nivo/scales'\nimport { animated, useSpring, useTransition } from '@react-spring/web'\nimport * as React from 'react'\nimport { memo, useCallback, useMemo } from 'react'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisProps } from '../types'\nimport { AxisTick } from './AxisTick'\n\nexport const NonMemoizedAxis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    truncateTickAt,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    style,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n    const axisTheme = useExtendedAxisTheme(theme.axis, style)\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        truncateTickAt,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <>\n                <Text\n                    transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                    textAnchor={textAnchor}\n                    style={{\n                        ...axisTheme.legend.text,\n                        dominantBaseline: 'central',\n                    }}\n                >\n                    {legend}\n                </Text>\n            </>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const getAnimatedProps = useCallback(\n        (tick: (typeof ticks)[0]) => {\n            return {\n                opacity: 1,\n                transform: `translate(${tick.x},${tick.y})`,\n                textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n            }\n        },\n        [tickRotation]\n    )\n    const getFromAnimatedProps = useCallback(\n        (tick: (typeof ticks)[0]) => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        [tickRotation]\n    )\n\n    const transition = useTransition<\n        (typeof ticks)[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: getAnimatedProps,\n        from: getFromAnimatedProps,\n        enter: getAnimatedProps,\n        update: getAnimatedProps,\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    truncateTickAt: truncateTickAt,\n                    animatedProps: transitionProps,\n                    theme: axisTheme.ticks,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={axisTheme.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nexport const Axis = memo(NonMemoizedAxis) as typeof NonMemoizedAxis\n","export const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                            truncateTickAt={axis.truncateTickAt}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo, SVGAttributes } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return (\n            <animated.line\n                {...animatedProps}\n                {...(theme.grid.line as SVGAttributes<SVGLineElement>)}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians } from '@nivo/core'\nimport { Theme, PartialTheme, extendAxisTheme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n        theme,\n        style,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: Theme\n        style?: PartialTheme['axis']\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    const axisTheme = extendAxisTheme(theme.axis, style)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n\n    setCanvasFont(ctx, axisTheme.ticks.text)\n\n    const domainLineWidth = axisTheme.domain.line.strokeWidth ?? 0\n    if (typeof domainLineWidth !== 'string' && domainLineWidth > 0) {\n        ctx.lineWidth = domainLineWidth\n        ctx.lineCap = 'square'\n\n        if (axisTheme.domain.line.stroke) {\n            ctx.strokeStyle = axisTheme.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    const tickLineWidth = axisTheme.ticks.line.strokeWidth ?? 0\n    const shouldRenderTickLine = typeof tickLineWidth !== 'string' && tickLineWidth > 0\n    ticks.forEach(tick => {\n        if (shouldRenderTickLine) {\n            ctx.lineWidth = tickLineWidth\n            ctx.lineCap = 'square'\n\n            if (axisTheme.ticks.line.stroke) {\n                ctx.strokeStyle = axisTheme.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        drawCanvasText(ctx, axisTheme.ticks.text, `${value}`)\n\n        ctx.fillText(`${value}`, 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        setCanvasFont(ctx, axisTheme.legend.text)\n\n        if (axisTheme.legend.text.fill) {\n            ctx.fillStyle = axisTheme.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        drawCanvasText(ctx, axisTheme.legend.text, legend)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: Theme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"names":["computeCartesianTicks","_ref","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","truncateTickAt","_ref$engine","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","d","_position","x","y","top","bottom","_position2","left","right","ticks","map","value","processedValue","valueLength","String","length","slice","concat","truncateTick","_extends","key","Date","valueOf","getFormatter","format","type","formatter","timeFormat","d3Format","computeGridLines","_ref2","width","height","_values","Array","isArray","undefined","lines","_position3","_position4","x1","x2","y1","y2","_position5","_position6","memoizedAxisTick","memo","_format","_value","onClick","textAnchor","theme","animatedProps","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","children","_jsx","jsx","Text","dominantBaseline","textTransform","NonMemoizedAxis","_ref$x","_ref$y","_ref$tickSize","_ref$tickPadding","_ref$tickRotation","_ref$renderTick","renderTick","AxisTick","legend","_ref$legendPosition","legendPosition","_ref$legendOffset","legendOffset","ariaHidden","useTheme","axisTheme","useExtendedAxisTheme","formatValue","_computeCartesianTick","legendNode","legendX","legendY","legendRotation","_Fragment","_useMotionConfig","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","getAnimatedProps","useCallback","tick","getFromAnimatedProps","transition","useTransition","keys","initial","from","enter","update","leave","jsxs","transitionProps","_state","tickIndex","React","createElement","rotate","domain","Axis","positions","Axes","xScale","yScale","axes","isXAxis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_axisTheme$domain$lin","_axisTheme$ticks$line","save","extendAxisTheme","setCanvasFont","domainLineWidth","strokeWidth","lineWidth","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","tickLineWidth","shouldRenderTickLine","forEach","degreesToRadians","drawCanvasText","fillText","restore","fill","fillStyle","_ref3"],"mappings":"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"}